<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PopAR Kit</title>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js" crossorigin="anonymous"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: #2c3e50;
            background-image:
                radial-gradient(circle at 25px 25px, rgba(255, 255, 255, 0.2) 2%, transparent 0%),
                radial-gradient(circle at 75px 75px, rgba(255, 255, 255, 0.2) 2%, transparent 0%);
            background-size: 100px 100px;
            font-family: 'Comic Sans MS', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            touch-action: none;
        }

        .container {
            position: relative;
            width: 90%;
            max-width: 1000px;
            height: 80vh;
            max-height: 600px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .game-area {
            position: relative;
            width: 100%;
            height: 100%;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            background: linear-gradient(135deg, #3498db 0%, #8e44ad 100%);
        }

        .video-container {
            position: relative;
            width: 90%;
            height: 90%;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            border-radius: 12px;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
        }

        #video-input {
            position: absolute;
            transform: scaleX(-1); /* Flip horizontally for mirror effect */
            visibility: hidden;
        }

        #output-canvas {
            position: absolute;
            transform: scaleX(-1); /* Flip horizontally for mirror effect */
            z-index: 1;
            background-color: transparent;
            border-radius: 8px;
        }

        .letter-bubble {
            position: absolute;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(255,255,255,0.9) 0%, rgba(91,189,255,0.8) 100%);
            box-shadow: 0 0 15px rgba(0, 170, 255, 0.7);
            transform: translate(-50%, -50%);
            z-index: 2;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            font-weight: bold;
            color: #333;
        }

        .score-container {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 3;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 10px 20px;
            border-radius: 20px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .score {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .question-counter {
            font-size: 18px;
        }

        .start-screen, .level-selection-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 4;
            border-radius: 16px;
        }

        .start-screen h1, .level-selection-screen h1 {
            font-size: 36px;
            margin-bottom: 20px;
            text-align: center;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        }

        .start-screen p, .level-selection-screen p {
            font-size: 18px;
            margin-bottom: 30px;
            max-width: 80%;
            text-align: center;
        }

        .btn {
            background: linear-gradient(45deg, #FF8E53, #FE6B8B);
            border: none;
            color: white;
            padding: 12px 30px;
            font-size: 18px;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            margin: 10px;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.3);
        }

        .btn:active {
            transform: translateY(1px);
        }

        .level-buttons-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-bottom: 20px;
        }

        .level-input-container {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
        }

        #sheet-name-input {
            padding: 10px 15px;
            font-size: 18px;
            border: 2px solid #3498db;
            border-radius: 8px;
            margin-right: 15px;
            outline: none;
            width: 250px;
            max-width: 80%;
            box-sizing: border-box;
            color: #333;
            background-color: #f8f9fa;
            transition: border-color 0.3s ease;
        }

        #sheet-name-input:focus {
            border-color: #8e44ad;
            box-shadow: 0 0 8px rgba(142, 68, 173, 0.5);
        }

        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 5;
            border-radius: 16px;
        }

        .game-over h2 {
            font-size: 48px;
            margin-bottom: 20px;
            color: #FFC107;
            text-shadow: 0 2px 10px rgba(255, 193, 7, 0.5);
        }

        .game-over p {
            font-size: 24px;
            margin-bottom: 30px;
        }

        .hand-indicator {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 10px;
            z-index: 3;
            font-size: 16px;
        }

        .camera-permission {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 10;
            text-align: center;
            padding: 20px;
            border-radius: 16px;
        }

        .camera-permission h2 {
            font-size: 28px;
            margin-bottom: 20px;
        }

        .camera-permission p {
            font-size: 18px;
            margin-bottom: 30px;
            max-width: 80%;
        }

        .game-title {
            position: absolute;
            top: -60px;
            left: 0;
            width: 100%;
            text-align: center;
            font-size: 32px;
            font-weight: bold;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
            color: white;
        }

        .word-display {
            position: absolute;
            bottom: 100px;
            left: 0;
            width: 100%;
            text-align: center;
            z-index: 3;
        }

        .word-container {
            display: inline-flex;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 15px 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .letter-box {
            width: 40px;
            height: 50px;
            margin: 0 5px;
            background-color: white;
            border: 2px solid #3498db;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            font-weight: bold;
            color: #333;
        }

        .letter-box.missing {
            background-color: #f8f9fa;
            border: 2px dashed #3498db;
            color: transparent;
        }

        .feedback {
            position: absolute;
            bottom: 180px;
            left: 0;
            width: 100%;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            z-index: 3;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .feedback.correct {
            color: #2ecc71;
            text-shadow: 0 0 10px rgba(46, 204, 113, 0.7);
        }

        .feedback.incorrect {
            color: #e74c3c;
            text-shadow: 0 0 10px rgba(231, 76, 60, 0.7);
        }

        .main-menu-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 3;
            display: none;
        }

        .volume-controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }

        .volume-slider-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 15px;
        }

        .volume-slider-container label {
            margin-bottom: 5px;
            font-size: 16px;
        }

        .volume-slider {
            width: 200px;
        }

        @media (max-width: 768px) {
            .container {
                width: 95%;
                height: 70vh;
            }

            .start-screen h1, .level-selection-screen h1 {
                font-size: 28px;
            }

            .start-screen p, .level-selection-screen p {
                font-size: 16px;
            }

            .letter-bubble {
                width: 50px;
                height: 50px;
                font-size: 24px;
            }

            .game-title {
                top: -40px;
                font-size: 24px;
            }

            .letter-box {
                width: 30px;
                height: 40px;
                font-size: 22px;
            }

            .level-input-container {
                flex-direction: column;
            }

            #sheet-name-input {
                margin-right: 0;
                margin-bottom: 15px;
            }

            .main-menu-btn {
                top: 10px;
                right: 10px;
                padding: 8px 16px;
                font-size: 16px;
            }

            .volume-slider {
                width: 150px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="game-title">PopAR Kit</div>
        <div class="game-area">
            <div class="video-container">
                <video id="video-input" playsinline></video>
                <canvas id="output-canvas"></canvas>
            </div>

            <div class="score-container">
                <div class="score">Score: <span id="score">0</span></div>
                <div class="question-counter">Question: <span id="question-counter">0/X</span></div>
            </div>

            <div class="word-display">
                <div class="word-container" id="word-container">
                    </div>
            </div>

            <div class="feedback" id="feedback"></div>

            <div class="hand-indicator">
                Hand detected: <span id="hand-status">No</span>
            </div>

            <button class="btn main-menu-btn" id="main-menu-btn">Main Menu</button>

            <div class="level-selection-screen" id="level-selection-screen" style="display: none;">
                <h1>Choose Your Level</h1>
                <p>Select a predefined level or enter a custom Google Sheet tab name.</p>
                <div class="level-buttons-container" id="level-buttons-container">
                    </div>
                <div class="level-input-container">
                    <input type="text" id="sheet-name-input" placeholder="Enter Custom Sheet Tab Name" aria-label="Enter Sheet Tab Name">
                    <button class="btn" id="go-btn">Go!</button>
                </div>
                <div class="volume-controls">
                    <div class="volume-slider-container">
                        <label for="bgm-volume">Background Music</label>
                        <input type="range" id="bgm-volume" class="volume-slider" min="0" max="1" step="0.01" value="0.5">
                    </div>
                    <div class="volume-slider-container">
                        <label for="sfx-volume">Sound Effects</label>
                        <input type="range" id="sfx-volume" class="volume-slider" min="0" max="1" step="0.01" value="0.8">
                    </div>
                </div>
            </div>

            <div class="start-screen" id="start-screen" style="display: none;">
                <h1 id="start-screen-title">✏️ PopAR Kit ✏️</h1>
                <p id="start-screen-description">Use your index finger to pop the bubble with the correct letter to complete the word. Complete up to 10 word spellings!</p>
                <button class="btn" id="start-btn">Start Quiz</button>
            </div>

            <div class="game-over" id="game-over">
                <h2>Quiz Complete!</h2>
                <p>Your score: <span id="final-score">0</span>/X</p>
                <button class="btn" id="restart-btn">Play Again</button>
            </div>

            <div class="camera-permission" id="camera-permission">
                <h2>Camera Access Required</h2>
                <p>This quiz needs access to your camera to track your hand movements. Please allow camera access when prompted.</p>
                <button class="btn" id="camera-btn">Enable Camera</button>
            </div>
        </div>
    </div>

    <audio id="backgroundMusic" src="backgroundMusic.mp3" loop></audio>
    <audio id="buttonClickSound" preload="auto" src="buttonClickSound.mp3"></audio>
    <audio id="popBubbleSound" preload="auto" src="popBubbleSound.mp3"></audio>
    <audio id="correctAnswerSound" preload="auto" src="correctAnswerSound.mp3"></audio>
    <audio id="wrongAnswerSound" preload="auto" src="wrongAnswerSound.mp3"></audio>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const videoElement = document.getElementById('video-input');
            const outputCanvas = document.getElementById('output-canvas');
            const ctx = outputCanvas.getContext('2d');
            const scoreElement = document.getElementById('score');
            const questionCounterElement = document.getElementById('question-counter');

            const cameraPermissionScreen = document.getElementById('camera-permission');
            const levelSelectionScreen = document.getElementById('level-selection-screen');
            const startScreen = document.getElementById('start-screen');
            const gameOverScreen = document.getElementById('game-over');

            const cameraBtn = document.getElementById('camera-btn');
            const startBtn = document.getElementById('start-btn');
            const restartBtn = document.getElementById('restart-btn');
            const sheetNameInput = document.getElementById('sheet-name-input');
            const goBtn = document.getElementById('go-btn');
            const levelButtonsContainer = document.getElementById('level-buttons-container');
            const mainMenuBtn = document.getElementById('main-menu-btn');
            const bgmVolumeSlider = document.getElementById('bgm-volume');
            const sfxVolumeSlider = document.getElementById('sfx-volume');

            const finalScoreElement = document.getElementById('final-score');
            const handStatusElement = document.getElementById('hand-status');
            const videoContainer = document.querySelector('.video-container');
            const wordContainer = document.getElementById('word-container');
            const feedbackElement = document.getElementById('feedback');
            const startScreenTitle = document.getElementById('start-screen-title');
            const startScreenDescription = document.getElementById('start-screen-description');

            // Game state
            let score = 0;
            let currentQuestionIndex = 0;
            let gameActive = false;
            let letterBubbles = [];
            let handLandmarks = null;
            let cameraInitialized = false;
            let videoAspectRatio = 16/9;
            let currentWord = "";
            let missingLetterIndex = 0;
            let correctLetter = "";
            let selectedQuestions = [];
            let waitingForNextQuestion = false;
            let fetchedWords = [];

            // Audio elements
            const backgroundMusic = document.getElementById('backgroundMusic');
            const buttonClickSound = document.getElementById('buttonClickSound');
            const popBubbleSound = document.getElementById('popBubbleSound');
            const correctAnswerSound = document.getElementById('correctAnswerSound');
            const wrongAnswerSound = document.getElementById('wrongAnswerSound');

            // Replay sound function
            function playSound(soundElement) {
                if (soundElement) {
                    soundElement.currentTime = 0;
                    soundElement.play().catch(e => console.error("Audio playback failed:", e));
                }
            }

            // New function to initialize audio and work around browser autoplay policies
            function initializeAudio() {
                if (backgroundMusic) {
                    backgroundMusic.volume = bgmVolumeSlider.value;
                    backgroundMusic.play().catch(e => console.error("Background music playback failed:", e));
                }
                if (buttonClickSound) buttonClickSound.load();
                if (popBubbleSound) popBubbleSound.load();
                if (correctAnswerSound) correctAnswerSound.load();
                if (wrongAnswerSound) wrongAnswerSound.load();
            }

            function setSoundEffectVolume(volume) {
                if (buttonClickSound) buttonClickSound.volume = volume;
                if (popBubbleSound) popBubbleSound.volume = volume;
                if (correctAnswerSound) correctAnswerSound.volume = volume;
                if (wrongAnswerSound) wrongAnswerSound.volume = volume;
            }

            // OpenSheet API URL base - YOUR SHEET ID HERE
            const googleSheetId = '1ZMEfBGZQHGf-UVvNJj8D7cOhQ3M2Z2cYNBrNMT4pnn0'; // Your sheet ID
            const baseOpenSheetUrl = `https://opensheet.elk.sh/${googleSheetId}/`;

            // Available levels (these should match your Google Sheet tab names exactly)
            const availableLevels = ["Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6"];
            let selectedLevelName = ''; // This will now come from user input or button click

            // --- Utility Functions ---
            function updateCanvasSize() {
                const containerWidth = videoContainer.clientWidth;
                const containerHeight = videoContainer.clientHeight;

                let canvasWidth, canvasHeight;
                if (containerWidth / containerHeight > videoAspectRatio) {
                    canvasHeight = containerHeight;
                    canvasWidth = containerHeight * videoAspectRatio;
                } else {
                    canvasWidth = containerWidth;
                    canvasHeight = containerWidth / videoAspectRatio;
                }
                outputCanvas.width = canvasWidth;
                outputCanvas.height = canvasHeight;
                outputCanvas.style.left = `${(containerWidth - canvasWidth) / 2}px`;
                outputCanvas.style.top = `${(containerHeight - canvasHeight) / 2}px`;
            }

            window.addEventListener('resize', updateCanvasSize);

            // Helper function to shuffle an array
            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
                return array;
            }

            // Function to generate random incorrect letters for options
            function getRandomIncorrectLetters(correctLetter, count = 2) {
                const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                const incorrectLetters = [];
                while (incorrectLetters.length < count) {
                    const randomLetter = alphabet[Math.floor(Math.random() * alphabet.length)];
                    if (randomLetter !== correctLetter && !incorrectLetters.includes(randomLetter)) {
                        incorrectLetters.push(randomLetter);
                    }
                }
                return incorrectLetters;
            }

            // Function to generate all question data (missing index, options) for a given word
            function generateQuestionData(word) {
                if (word.length === 0) {
                    console.warn("Attempted to generate question for an empty word.");
                    return null;
                }
                // Don't allow selecting first or last letter for very short words (e.g. 2-3 letters)
                let missingIdx;
                if (word.length <= 3) {
                    missingIdx = Math.floor(word.length / 2);
                } else {
                    missingIdx = Math.floor(Math.random() * (word.length - 2)) + 1; // Any letter except first/last
                }

                const correctLtr = word[missingIdx];

                const incorrectLtrs = getRandomIncorrectLetters(correctLtr, 2);
                const options = shuffleArray([correctLtr, ...incorrectLtrs]); // Options array is already shuffled here

                return {
                    word: word,
                    missingIndex: missingIdx,
                    correctLetter: correctLtr,
                    options: options
                };
            }

            // --- MediaPipe Hands Setup ---
            const hands = new Hands({
                locateFile: (file) => {
                    return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;
                }
            });

            hands.setOptions({
                maxNumHands: 1,
                modelComplexity: 1,
                minDetectionConfidence: 0.5,
                minTrackingConfidence: 0.5
            });

            hands.onResults(onResults);

            // --- Camera Initialization ---
            function initCamera() {
                if (cameraInitialized) return;

                // Call the audio initialization function here
                initializeAudio();
                
                const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
                const constraints = {
                    video: {
                        facingMode: isMobile ? "user" : "user",
                        width: { ideal: 1280 },
                        height: { ideal: 720 }
                    }
                };

                navigator.mediaDevices.getUserMedia(constraints)
                    .then((stream) => {
                        videoElement.srcObject = stream;
                        videoElement.onloadedmetadata = () => {
                            videoElement.play();

                            videoAspectRatio = videoElement.videoWidth / videoElement.videoHeight;
                            updateCanvasSize();

                            cameraInitialized = true;
                            cameraPermissionScreen.style.display = 'none';
                            showLevelSelectionScreen(); // Show level selection after camera init

                            const camera = new Camera(videoElement, {
                                onFrame: async () => {
                                    await hands.send({ image: videoElement });
                                },
                                width: 1280,
                                height: 720
                            });
                            camera.start();
                        };
                    })
                    .catch((err) => {
                        console.error("Error accessing camera: ", err);
                        alert("Camera access denied or error occurred. Please enable camera access to play the game.");
                    });
            }

            // --- MediaPipe Results Handling ---
            function onResults(results) {
                ctx.save();
                ctx.clearRect(0, 0, outputCanvas.width, outputCanvas.height);

                if (results.image) {
                    ctx.drawImage(
                        results.image,
                        0, 0,
                        outputCanvas.width,
                        outputCanvas.height
                    );
                }

                if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {
                    handLandmarks = results.multiHandLandmarks[0];
                    handStatusElement.textContent = "Yes";

                    drawConnectors(ctx, handLandmarks, HAND_CONNECTIONS, { color: '#00FF00', lineWidth: 3 });
                    drawLandmarks(ctx, handLandmarks, { color: '#FF0000', lineWidth: 1, radius: 3 });

                    if (gameActive && !waitingForNextQuestion && handLandmarks[8]) {
                        const indexFinger = {
                            x: handLandmarks[8].x * outputCanvas.width,
                            y: handLandmarks[8].y * outputCanvas.height
                        };
                        checkLetterBubbleCollision(indexFinger);
                    }
                } else {
                    handLandmarks = null;
                    handStatusElement.textContent = "No";
                }

                drawLetterBubbles();
                ctx.restore();
            }

            // --- Game Visuals and Logic ---
            function createLetterBubbles(options) {
                letterBubbles = [];

                const canvasWidth = outputCanvas.width;
                const canvasHeight = outputCanvas.height;
                const bubbleRadius = Math.min(canvasWidth, canvasHeight) * 0.05;

                const positions = [
                    { x: canvasWidth * 0.25, y: canvasHeight * 0.3, label: 'left' },
                    { x: canvasWidth * 0.5, y: canvasHeight * 0.3, label: 'center' },
                    { x: canvasWidth * 0.75, y: canvasHeight * 0.3, label: 'right' }
                ];
                shuffleArray(positions); // Positions themselves are shuffled

                for (let i = 0; i < options.length; i++) {
                    const newBubble = {
                        x: positions[i].x,
                        y: positions[i].y,
                        radius: bubbleRadius,
                        letter: options[i],
                        isCorrect: options[i] === correctLetter,
                        createdAt: Date.now(),
                        popped: false,
                        visualPositionLabel: positions[i].label // Added for console logging
                    };
                    letterBubbles.push(newBubble);

                    if (newBubble.isCorrect) {
                        console.log(`Correct answer "${newBubble.letter}" placed at ${newBubble.visualPositionLabel} (x: ${newBubble.x.toFixed(0)}, y: ${newBubble.y.toFixed(0)})`);
                    }
                }
            }

            function drawLetterBubbles() {
                letterBubbles.forEach(bubble => {
                    if (!bubble.popped) {
                        const age = Date.now() - bubble.createdAt;
                        const pulseScale = 1 + 0.05 * Math.sin(age / 300);
                        const floatOffset = Math.sin(age / 1000) * 5;

                        ctx.save();

                        const gradient = ctx.createRadialGradient(
                            bubble.x, bubble.y + floatOffset, bubble.radius * 0.5,
                            bubble.x, bubble.y + floatOffset, bubble.radius * 1.5
                        );
                        gradient.addColorStop(0, 'rgba(91, 189, 255, 0.8)');
                        gradient.addColorStop(1, 'rgba(91, 189, 255, 0)');

                        ctx.beginPath();
                        ctx.arc(bubble.x, bubble.y + floatOffset, bubble.radius * 1.5 * pulseScale, 0, Math.PI * 2);
                        ctx.fillStyle = gradient;
                        ctx.fill();

                        ctx.beginPath();
                        ctx.arc(bubble.x, bubble.y + floatOffset, bubble.radius * pulseScale, 0, Math.PI * 2);
                        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
                        ctx.fill();
                        ctx.strokeStyle = '#3498db';
                        ctx.lineWidth = 2;
                        ctx.stroke();

                        ctx.fillStyle = '#333';
                        const fontSize = Math.max(20, Math.min(28, bubble.radius * 0.8));
                        ctx.font = `bold ${fontSize}px Comic Sans MS, Arial`;
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';

                        ctx.scale(-1, 1); // Mirror text
                        ctx.fillText(bubble.letter, -bubble.x, bubble.y + floatOffset);

                        ctx.restore();
                    }
                });
            }

            function checkLetterBubbleCollision(indexFinger) {
                letterBubbles.forEach(bubble => {
                    if (!bubble.popped) {
                        const distance = Math.sqrt(
                            Math.pow(indexFinger.x - bubble.x, 2) +
                            Math.pow(indexFinger.y - bubble.y, 2)
                        );

                        if (distance < bubble.radius) {
                            bubble.popped = true;
                            playSound(popBubbleSound); // Play pop sound

                            if (bubble.isCorrect) {
                                score++;
                                scoreElement.textContent = score;
                                showFeedback("Correct! 🎉", true);
                                playSound(correctAnswerSound); // Play correct sound
                            } else {
                                showFeedback("Try again! 🤔", false);
                                playSound(wrongAnswerSound); // Play wrong sound
                            }

                            createPopEffect(bubble.x, bubble.y, bubble.letter, bubble.isCorrect);

                            waitingForNextQuestion = true;
                            setTimeout(() => {
                                currentQuestionIndex++;
                                // Only check against the actual number of questions available
                                if (currentQuestionIndex < selectedQuestions.length) {
                                    loadQuestion(selectedQuestions[currentQuestionIndex]);
                                } else {
                                    endGame();
                                }
                                waitingForNextQuestion = false;
                            }, 1500);
                        }
                    }
                });
            }

            function createPopEffect(x, y, letter, isCorrect) {
                const numParticles = 20;
                const particles = [];
                for (let i = 0; i < numParticles; i++) {
                    const angle = (i / numParticles) * Math.PI * 2;
                    const speed = 2 + Math.random() * 2;
                    particles.push({
                        x: x, y: y,
                        vx: Math.cos(angle) * speed,
                        vy: Math.sin(angle) * speed,
                        radius: 2 + Math.random() * 3,
                        color: isCorrect ? '#2ecc71' : '#e74c3c',
                        life: 1.0
                    });
                }
                function animateParticles() {
                    ctx.save();
                    particles.forEach((p, index) => {
                        p.x += p.vx; p.y += p.vy; p.vy += 0.1;
                        p.life -= 0.02;
                        if (p.life <= 0) { particles.splice(index, 1); return; }
                        ctx.beginPath();
                        ctx.arc(p.x, p.y, p.radius * p.life, 0, Math.PI * 2);
                        ctx.fillStyle = p.color;
                        ctx.globalAlpha = p.life;
                        ctx.fill();
                    });
                    ctx.restore();
                    if (particles.length > 0) { requestAnimationFrame(animateParticles); }
                }
                animateParticles();
            }

            function showFeedback(message, isCorrect) {
                feedbackElement.textContent = message;
                feedbackElement.className = isCorrect ? 'feedback correct' : 'feedback incorrect';
                feedbackElement.style.opacity = 1;
                setTimeout(() => { feedbackElement.style.opacity = 0; }, 1500);
            }

            function displayWord(word, missingIndex) {
                wordContainer.innerHTML = '';
                for (let i = 0; i < word.length; i++) {
                    const letterBox = document.createElement('div');
                    letterBox.className = i === missingIndex ? 'letter-box missing' : 'letter-box';
                    letterBox.textContent = i === missingIndex ? '?' : word[i];
                    wordContainer.appendChild(letterBox);
                }
            }

            function loadQuestion(question) {
                currentWord = question.word;
                missingLetterIndex = question.missingIndex;
                correctLetter = question.correctLetter;

                displayWord(currentWord, missingLetterIndex);
                createLetterBubbles(question.options);

                // Update question counter to reflect the actual number of questions
                questionCounterElement.textContent = `${currentQuestionIndex + 1}/${selectedQuestions.length}`;
            }

            // Helper to set start button action and text
            function setStartButtonAction(action, text) {
                // Remove existing listener to prevent multiple bindings
                startBtn.removeEventListener('click', startGame);
                startBtn.removeEventListener('click', showLevelSelectionScreen);
                // Add the new listener
                startBtn.addEventListener('click', action);
                startBtn.textContent = text;
                startBtn.style.display = 'block'; // Ensure button is visible
            }

            async function startGame() {
                playSound(buttonClickSound);
                if (!selectedLevelName) {
                    alert("No level selected. Please choose a level or enter a sheet name.");
                    showLevelSelectionScreen();
                    return;
                }

                startScreenTitle.textContent = `Loading ${selectedLevelName} Words...`;
                startScreenDescription.textContent = 'Please wait while we fetch the quiz words.';
                startBtn.style.display = 'none'; // Hide button during loading
                mainMenuBtn.style.display = 'none'; // Hide main menu button during loading on start screen
                backgroundMusic.pause(); // Pause music during game

                fetchedWords = [];
                const fetchSuccess = await fetchWordsFromOpenSheet(selectedLevelName);

                if (!fetchSuccess || fetchedWords.length === 0) {
                    startScreenTitle.textContent = 'Error!';
                    startScreenDescription.textContent = 'Could not load words for this level. Check the sheet name and ensure it has words in Column A.';
                    setStartButtonAction(showLevelSelectionScreen, 'Back to Level Selection'); // Reroute button
                    return;
                }

                // Generate questions for all fetched words, then select up to 10
                let potentialQuestions = fetchedWords.map(word => generateQuestionData(word)).filter(q => q !== null);

                // If there are no valid questions, display an error
                if (potentialQuestions.length === 0) {
                    startScreenTitle.textContent = 'No Valid Words Found!';
                    startScreenDescription.textContent = `The sheet "${selectedLevelName}" does not contain any valid words (words with at least 2 letters, and having a 'Word' column header).`;
                    setStartButtonAction(showLevelSelectionScreen, 'Back to Level Selection'); // Reroute button
                    return;
                }

                // Select up to 10 questions, or all if fewer than 10 are available
                selectedQuestions = selectRandomWords(potentialQuestions, Math.min(10, potentialQuestions.length));

                score = 0;
                currentQuestionIndex = 0;
                gameActive = true;
                letterBubbles = [];
                waitingForNextQuestion = false;

                scoreElement.textContent = score;
                // Update question counter to reflect the actual number of questions for this quiz
                questionCounterElement.textContent = `${currentQuestionIndex + 1}/${selectedQuestions.length}`;

                startScreen.style.display = 'none';
                gameOverScreen.style.display = 'none';
                mainMenuBtn.style.display = 'block'; // Show main menu button once game starts

                loadQuestion(selectedQuestions[0]);
            }

            function endGame() {
                gameActive = false;
                finalScoreElement.textContent = score;
                // Update final score display to reflect the actual total questions
                document.querySelector('#game-over p').innerHTML = `Your score: <span id="final-score">${score}</span>/${selectedQuestions.length}`;
                gameOverScreen.style.display = 'flex';
                mainMenuBtn.style.display = 'none'; // Hide main menu button on game over screen
                backgroundMusic.play().catch(e => console.error("Background music playback failed:", e)); // Resume music after game
            }

            function selectRandomWords(words, count) {
                const shuffled = [...words];
                shuffleArray(shuffled);
                return shuffled.slice(0, Math.min(count, shuffled.length));
            }

            async function fetchWordsFromOpenSheet(sheetName) {
                try {
                    const url = `${baseOpenSheetUrl}${encodeURIComponent(sheetName)}`; // Encode sheet name for URL safety
                    console.log(`Fetching words from: ${url}`);
                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status.toLocaleString()}`);
                    }
                    const data = await response.json();

                    fetchedWords = data.map(row => row.Word ? row.Word.toUpperCase() : null).filter(word => word !== null && word.length > 1); // Filter out words with length 0 or 1
                    console.log(`Words fetched for ${sheetName}:`, fetchedWords);
                    return true;
                } catch (error) {
                    console.error(`Error fetching words from OpenSheet for ${sheetName}:`, error);
                    // The alert is still useful to explain the issue before the button appears.
                    alert(`Failed to load quiz words for "${sheetName}". Please ensure the sheet name is exact, the sheet is public, and it contains words in 'Word' column.`);
                    fetchedWords = [];
                    return false;
                }
            }

            // --- Level Selection Logic (Updated to include both methods) ---
            function showLevelSelectionScreen() {
                // Reset game state when returning to main menu/level selection
                gameActive = false;
                letterBubbles = [];
                wordContainer.innerHTML = ''; // Clear displayed word
                feedbackElement.textContent = ''; // Clear feedback
                mainMenuBtn.style.display = 'none'; // Ensure main menu button is hidden here

                startScreen.style.display = 'none';
                gameOverScreen.style.display = 'none';
                levelSelectionScreen.style.display = 'flex';
                populateLevelButtons(); // Populate static level buttons
                sheetNameInput.value = selectedLevelName; // Pre-fill if a level was previously selected
                sheetNameInput.focus();
                // Ensure the start button is correctly set for starting a new game
                setStartButtonAction(startGame, 'Start Quiz');

                // Resume background music if it's paused
                if (backgroundMusic && backgroundMusic.paused) {
                    backgroundMusic.play().catch(e => console.error("Background music playback failed:", e));
                }
            }

            // Re-added function to populate the static level buttons
            function populateLevelButtons() {
                levelButtonsContainer.innerHTML = ''; // Clear existing buttons
                availableLevels.forEach(level => {
                    const button = document.createElement('button');
                    button.className = 'btn';
                    button.textContent = level;
                    button.addEventListener('click', () => {
                        playSound(buttonClickSound);
                        selectLevel(level);
                    }); // Calls selectLevel directly
                    levelButtonsContainer.appendChild(button);
                });
            }

            // Handles selection from a predefined level button
            function selectLevel(levelName) {
                selectedLevelName = levelName;
                levelSelectionScreen.style.display = 'none';
                startScreen.style.display = 'flex';

                startScreenTitle.textContent = `✏️ PopAR Kit - ${selectedLevelName} ✏️`;
                startScreenDescription.textContent = `Use your index finger to pop the bubble with the correct letter to complete the word. This quiz will have ${selectedLevelName.includes("Level") ? "10" : "up to 10"} word spellings!`; // Updated description
                setStartButtonAction(startGame, 'Start Quiz'); // Always reset to startGame when a level is selected
            }

            // Handles selection from the custom input field
            function handleCustomLevelInput() {
                playSound(buttonClickSound);
                const enteredSheetName = sheetNameInput.value.trim();
                if (!enteredSheetName) {
                    alert("Please enter a sheet name to continue.");
                    return;
                }

                selectLevel(enteredSheetName); // Use the same function to set the level and show start screen
            }

            // --- Event Listeners ---
            restartBtn.addEventListener('click', () => {
                playSound(buttonClickSound);
                showLevelSelectionScreen();
            });

            cameraBtn.addEventListener('click', () => {
                // This is the first interaction. We'll initialize the audio here.
                initCamera();
            });

            goBtn.addEventListener('click', handleCustomLevelInput); // Listener for the 'Go!' button
            mainMenuBtn.addEventListener('click', () => {
                playSound(buttonClickSound);
                showLevelSelectionScreen();
            });

            // Allow pressing Enter key in the input field
            sheetNameInput.addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    handleCustomLevelInput();
                }
            });

            // Volume slider event listeners
            bgmVolumeSlider.addEventListener('input', (event) => {
                if (backgroundMusic) {
                    backgroundMusic.volume = event.target.value;
                }
            });

            sfxVolumeSlider.addEventListener('input', (event) => {
                const volume = event.target.value;
                setSoundEffectVolume(volume);
            });


            // --- Initial Setup ---
            updateCanvasSize();
            cameraPermissionScreen.style.display = 'flex'; // Start by showing camera permission
            setSoundEffectVolume(sfxVolumeSlider.value); // Set initial volume for sound effects
        });
    </script>
</body>
</html>
